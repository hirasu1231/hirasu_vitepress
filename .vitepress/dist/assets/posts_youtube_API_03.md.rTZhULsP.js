import{_ as l,c as p,j as k,G as i,w as n,ag as e,B as h,o as d}from"./chunks/framework.BDI6Vt0-.js";const A=JSON.parse('{"title":"YouTube Data API を使って動画の再生回数等の情報を取得する","description":"YouTube Data API を使って動画の再生回数等の情報を取得します．","frontmatter":{"title":"YouTube Data API を使って動画の再生回数等の情報を取得する","description":"YouTube Data API を使って動画の再生回数等の情報を取得します．","date":"2021-08-26T00:00:00.000Z","category":["Python"],"tags":["Python","jupyter","YouTube_Data_API","YouTube"]},"headers":[],"relativePath":"posts/youtube_API_03.md","filePath":"posts/youtube_API_03.md"}'),E={name:"posts/youtube_API_03.md"};function r(y,s,g,o,F,c){const a=h("CallInArticleAdsense"),t=h("ClientOnly");return d(),p("div",null,[s[0]||(s[0]=k("p",null,"YouTube Data API を使って動画の再生回数等の情報を取得します．",-1)),i(t,null,{default:n(()=>[i(a)]),_:1}),s[1]||(s[1]=e(`<h2 id="youtube-data-apとは" tabindex="-1">YouTube Data APとは <a class="header-anchor" href="#youtube-data-apとは" aria-label="Permalink to &quot;YouTube Data APとは&quot;">​</a></h2><blockquote><p>YouTubeが提供しているAPIで、動画やチャンネル、再生リストに関わる情報を取得して、自分のWebサイトやアプリケーションで使用することができます。<br> 公式のドキュメントが用意されているので、詳しくはこちらをご覧ください。<br><a href="https://developers.google.com/youtube/v3/getting-started?hl=ja" target="_blank" rel="noreferrer">https://developers.google.com/youtube/v3/getting-started?hl=ja</a><br> 引用元:<a href="https://liginc.co.jp/497428#:~:text=%E3%81%BE%E3%81%A8%E3%82%81-,YouTube%20Data%20API%E3%81%A8%E3%81%AF,%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82" target="_blank" rel="noreferrer">YouTube Data API v3を使用して、YouTubeページと同じリストモジュールを作ってみた</a></p></blockquote><blockquote><p>YouTube が提供している API で、動画やチャンネルなど情報を取得して、自分の Web サイトやアプリケーションで使用することができます。<br> 一日あたりのAPI使用量（クォータ）の上限が10000になっているので、注意して使用してください。<br> 引用元:<a href="https://qiita.com/ryoya41/items/dd1fd4c1427ece787eea" target="_blank" rel="noreferrer">【Python】YouTube Data API を使って、いろんな情報を取得してみた！</a></p></blockquote><h2 id="モジュールのインストール" tabindex="-1">モジュールのインストール <a class="header-anchor" href="#モジュールのインストール" aria-label="Permalink to &quot;モジュールのインストール&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install google</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span></span></code></pre></div><h2 id="youtubeの情報を取得-複数の動画" tabindex="-1">youtubeの情報を取得(複数の動画) <a class="header-anchor" href="#youtubeの情報を取得-複数の動画" aria-label="Permalink to &quot;youtubeの情報を取得(複数の動画)&quot;">​</a></h2><p>特定のキーワードで検索かけて，複数の動画の情報を取得します．</p><p>最終的には,DataFrameで出力します．</p><p>ここでは，以下の情報を取得します．</p><ul><li>video_id</li><li>タイトル</li><li>クレイピング日時</li><li>動画の公開日時</li><li>チャンネルタイトル</li><li>チャンネルID</li><li>概要欄</li><li>サムネイル</li></ul><h3 id="youtubeの情報をdataframe形式で取得-前回と一緒" tabindex="-1">youtubeの情報をDataFrame形式で取得(前回と一緒) <a class="header-anchor" href="#youtubeの情報をdataframe形式で取得-前回と一緒" aria-label="Permalink to &quot;youtubeの情報をDataFrame形式で取得(前回と一緒)&quot;">​</a></h3><p>ここでは，特定キーワードを含むタイトルの動画を再生回数順でDataFrame形式で取得します．</p><p>また，任意の動画数分だけ取得できるようにもしています．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pandas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiclient.discovery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#numに入れた数字×5件の情報を取得</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#その他のパラメーターはAPIから情報を取得するパラメータと同じ</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 動画のタイトル等を抜粋()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_video_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part, q, order, type, num):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dic_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    search_response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youtube.search().list(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">part</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">part,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youtube.search().list(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">part</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">part,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).execute()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #一度に5件しか取得できないため何度も繰り返して実行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num):        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dic_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dic_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;items&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        search_response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youtube.search().list_next(search_response, output)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> search_response.execute()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.DataFrame(dic_list)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #各動画毎に一意のvideoIdを取得</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.DataFrame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;videoId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #各動画毎に一意のvideoIdを取得必要な動画情報だけ取得</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.DataFrame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;snippet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))[[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;channelTitle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;publishedAt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;channelId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thumbnails&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ddf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.concat([df1,df2], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 日本時刻に修正+9hours</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ddf[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;publishedAt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.to_datetime(ddf[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;publishedAt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime.timedelta(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hours</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ddf</span></span></code></pre></div><h2 id="再生回数等の情報を取得" tabindex="-1">再生回数等の情報を取得 <a class="header-anchor" href="#再生回数等の情報を取得" aria-label="Permalink to &quot;再生回数等の情報を取得&quot;">​</a></h2><p>上記のタイトル情報を整理したDataFrameに再生回数等の情報を追記します．</p><ul><li>再生回数</li><li>good数</li><li>Bad数</li><li>コメント数</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#videoIdを入力することで、その動画の具体的な再生回数やいいね数を取得する関数を作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_statistics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statistics </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youtube.videos().list(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">part</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;statistics&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).execute()[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;items&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;statistics&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statistics</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_video_dataframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(q, order, _type, num):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 動画情報の取得</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_snippet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_video_info(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">part</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;snippet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 動画の再生回数等を取得</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.DataFrame(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df_snippet[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;videoId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].apply(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x : get_statistics(x))))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # データフレームの結合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.concat([df_snippet,df_stati, axis = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # スクレイピング日時を入力</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scrape_date = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(datetime.date.today()).replace(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_output[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scrape_date&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] = scrape_date</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 日本時刻に修正+9hours</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_output[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;publishedAt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] = pd.to_datetime(df_output[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;publishedAt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime.timedelta(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hours</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df_output</span></span></code></pre></div><h2 id="コードの実行" tabindex="-1">コードの実行 <a class="header-anchor" href="#コードの実行" aria-label="Permalink to &quot;コードの実行&quot;">​</a></h2><p>以下のコードで実行します．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 引数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">part</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;snippet&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ボードゲーム&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;date&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;video&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #Max:75/day-&gt;75*5=375本/day</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># APIの取得</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">YOUTUBE_API_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;＊＊＊＊＊＊＊＊＊＊＊＊&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">youtube </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;youtube&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">developerKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">YOUTUBE_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 情報をデータフレーム形式で取得</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df_youtube </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make_video_dataframe(q, order, _type, num)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display(df_youtube.head())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># csvに出力</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># df_info.to_csv(&#39;{}_scape.csv&#39;.format(scrape_date), index=False)</span></span></code></pre></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>videoId</th><th>channelTitle</th><th>publishedAt</th><th>channelId</th><th>title</th><th>description</th><th>thumbnails</th><th>viewCount</th><th>likeCount</th><th>dislikeCount</th><th>favoriteCount</th><th>commentCount</th><th>scrape_date</th></tr></thead><tbody><tr><th>0</th><td>k955sk9AOug</td><td>ただのハセベ</td><td>2021-06-16T20:59:12Z</td><td>UCc308oE3ONLKlHWyh2BYsig</td><td>【たまるば】ボードゲームアリーナ。ニムトやってみました！★</td><td>5月31日分の配信です。 今回は「ボードゲームアリーナ」をたまるばの４人でやっていきます。 ...</td><td>{&#39;default&#39;: {&#39;url&#39;: &#39;https://i.ytimg.com/vi/k9...</td><td>2</td><td>0</td><td>0</td><td>0</td><td>0</td><td>20210617</td></tr><tr><th>1</th><td>4ZEVCDBfTUo</td><td>エレクリ放送局</td><td>2021-06-16T19:47:33Z</td><td>UCPo0NkhoaqJAbsDxFiEwAlw</td><td>【ラジオ】りんとら＆ぺんぎんぬでボードゲーム雑談ラジオ【エレクリラジオ#3】【作業用】</td><td>タイムスタンプ(目次)～ 配信後に更新します この企画では、りんとらと毎回変わるゲストがボー...</td><td>{&#39;default&#39;: {&#39;url&#39;: &#39;https://i.ytimg.com/vi/4Z...</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>20210617</td></tr><tr><th>2</th><td>jf-OpbwFDvo</td><td>はるGameカンパニー</td><td>2021-06-16T16:57:05Z</td><td>UCoNouSqOoyy2PmPMcweQKLg</td><td>【ボードゲーム】コードネームする！【連想】【コラボ配信】</td><td>今回２回目のプレイですが、前回よりも更に楽しんでいこうと思います！ 年越（主催者様） Twi...</td><td>{&#39;default&#39;: {&#39;url&#39;: &#39;https://i.ytimg.com/vi/jf...</td><td>7</td><td>0</td><td>0</td><td>0</td><td>0</td><td>20210617</td></tr><tr><th>3</th><td>Ai3u1Axmzvg</td><td>ソレイユ・ソレル / soleil soler</td><td>2021-06-16T16:50:34Z</td><td>UCqN_ItttzXou1G8-rhKDQNA</td><td>【世界のアソビ大全51】なかなか終わらないボードゲーム！？！？それが、ルドー！！！ローズとコ...</td><td>NPCには負けないぞっっ！！！ ♪コラボ相手♪ ローズ・ロアンヌ(Land project)...</td><td>{&#39;default&#39;: {&#39;url&#39;: &#39;https://i.ytimg.com/vi/Ai...</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>20210617</td></tr><tr><th>4</th><td>_mS8Ml-Opk4</td><td>縁側ボードゲーム</td><td>2021-06-16T13:29:17Z</td><td>UCyRwYeUzCvkNYBcEdnZ0J0g</td><td>「ヘックメック」ボードゲームプレイ動画</td><td>ヘックメックを４人で遊んでいます 扇風機がうるさかったり解説が高速だったりしてすみません.</td><td>{&#39;default&#39;: {&#39;url&#39;: &#39;https://i.ytimg.com/vi/_m...</td><td>9</td><td>0</td><td>0</td><td>0</td><td>NaN</td><td>20210617</td></tr></tbody></table></div><h2 id="参考サイト" tabindex="-1">参考サイト <a class="header-anchor" href="#参考サイト" aria-label="Permalink to &quot;参考サイト&quot;">​</a></h2><p><a href="https://qiita.com/ryoya41/items/dd1fd4c1427ece787eea" target="_blank" rel="noreferrer">【Python】YouTube Data API を使って、いろんな情報を取得してみた！</a></p><p><a href="https://liginc.co.jp/497428#:~:text=%E3%81%BE%E3%81%A8%E3%82%81-,YouTube%20Data%20API%E3%81%A8%E3%81%AF,%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82" target="_blank" rel="noreferrer">YouTube Data API v3を使用して、YouTubeページと同じリストモジュールを作ってみた</a></p><p><a href="https://qiita.com/g-k/items/7c98efe21257afac70e9" target="_blank" rel="noreferrer">Youtube Data APIを使ってPythonでYoutubeデータを取得する</a></p><p><a href="https://developers.google.com/youtube/v3/docs/search/list?hl=ja" target="_blank" rel="noreferrer">Search: list | YouTube Data API | Google Developers</a></p>`,28)),i(t,null,{default:n(()=>[i(a)]),_:1})])}const D=l(E,[["render",r]]);export{A as __pageData,D as default};
