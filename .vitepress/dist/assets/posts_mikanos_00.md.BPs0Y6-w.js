import{_ as p,c as h,j as k,G as a,w as n,ag as t,B as l,o as r}from"./chunks/framework.BDI6Vt0-.js";const y=JSON.parse('{"title":"Mac + Dockerで「ゼロからのOS自作入門」の環境構築を実装する","description":"Mac + Dockerで「ゼロからのOS自作入門」の環境構築を実装します．","frontmatter":{"title":"Mac + Dockerで「ゼロからのOS自作入門」の環境構築を実装する","description":"Mac + Dockerで「ゼロからのOS自作入門」の環境構築を実装します．","date":"2021-08-03T00:00:00.000Z","category":["OS"],"tags":["OS","Docker","C++"]},"headers":[],"relativePath":"posts/mikanos_00.md","filePath":"posts/mikanos_00.md"}'),o={name:"posts/mikanos_00.md"};function d(c,s,F,g,C,u){const i=l("CallInArticleAdsense"),e=l("ClientOnly");return r(),h("div",null,[s[0]||(s[0]=k("p",null,"Mac + Dockerで「ゼロからのOS自作入門」の環境構築を実装します．",-1)),a(e,null,{default:n(()=>[a(i)]),_:1}),s[1]||(s[1]=t(`<h2 id="mac-dockerでの環境構築" tabindex="-1">Mac + Dockerでの環境構築 <a class="header-anchor" href="#mac-dockerでの環境構築" aria-label="Permalink to &quot;Mac + Dockerでの環境構築&quot;">​</a></h2><p><a href="https://zenn.dev/sarisia/articles/6b57ea835344b6" target="_blank" rel="noreferrer">Docker ではじめる &quot;ゼロからのOS自作入門&quot;</a>に従い，VS Code Remote Container(devcontainer)を使用します．</p><p>VS Code Remote ContainerはVS code上でDockerのコンテナを使用する機能です．</p><p>仕組みとしては，環境と実行はDockerで，動作確認はローカルのXQuartzに表示させて実行します．</p><h2 id="xquartz" tabindex="-1">XQuartz <a class="header-anchor" href="#xquartz" aria-label="Permalink to &quot;XQuartz&quot;">​</a></h2><p>ここでは，DockerとVS Codeのインストールは省略します．</p><p>以下のコマンドでXQuartzのインストールを実行します．</p><p>XQuartzは「/アプリケーション/ユーティリティ」ディレクトリにあるXQuartzをダブルクリックして起動します．</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># XQuartzのインストール</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xquartz</span></span></code></pre></div><p>XQuartzが起動すると下記のようなターミナルが表示されます．表示されない場合は，上部メニューの「アプリケーション -&gt; ターミナル」で表示できます．</p><p>!(/image/xquartz.png)</p><p>XQuartzのターミナル上で，下記のコードを実行したら準備OKです．</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xhost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0.0.1</span></span></code></pre></div><h2 id="vs-code-devcontaine" tabindex="-1">VS Code devcontaine <a class="header-anchor" href="#vs-code-devcontaine" aria-label="Permalink to &quot;VS Code devcontaine&quot;">​</a></h2><p>ローカルのターミナルで以下コマンドを実行し，VS Codeが立ち上げます．</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 環境構築用のgit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/karaage0703/mikanos-devcontainer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ディレクトリ移動</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mikanos-devcontainer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># VSCodeで実行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>そして，VS Codeの左下の緑マークを押し，コマンドパレットで<code>Open Folder in Container...</code>を選択します.</p><p>!(/image/VS_Code1.png)</p><p>しばらく待つと，以下のようなダイアログが表示されるのでmikanos-devcontainerが選ばれていることを確認してOpenをクリックしますと，環境構築が一気に済みます．</p><p>!(/image/VS_Code2.png)</p><h2 id="環境構築の確認-hello-world" tabindex="-1">環境構築の確認(Hello World) <a class="header-anchor" href="#環境構築の確認-hello-world" aria-label="Permalink to &quot;環境構築の確認(Hello World)&quot;">​</a></h2><p>ここからは，VS Code上でのターミナルで実行します．</p><p>!(/image/VS_Code3.png)</p><h3 id="edk2の環境設定" tabindex="-1">edk2の環境設定 <a class="header-anchor" href="#edk2の環境設定" aria-label="Permalink to &quot;edk2の環境設定&quot;">​</a></h3><p>「ゼロからのOS自作入門」の筆者のgitから，コードをもろもろクローンします．</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># mikanosのgitをclone</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /workspaces/mikanos-devcontainer/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/uchan-nos/mikanos.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OS_DIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/workspaces/mikanos-devcontainer/mikanos</span></span></code></pre></div><p>そして，以下のコードでedk2の環境設定を実施します．</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># edk2のディレクトリに移動</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/edk2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># mikanosのパッケージを追加</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/workspace/mikanos/MikanLoaderPkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 環境変数設定用のスクリプト</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edksetup.sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 設定内容情報を作業ディレクトリにコピー</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Conf/target.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /workspaces/mikanos-devcontainer/target.txt</span></span></code></pre></div><h3 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World&quot;">​</a></h3><p>環境構築確認のために，Hello Worldのコードを本の解説を見ながら自作するのは重たい作業なので，あらかじめクローンされている<a href="https://github.com/uchan-nos/mikanos-build" target="_blank" rel="noreferrer">uchan-nos/mikanos-build</a>を使用します．ディレクトリの場所は~/osbookです．</p><p>ここからのコードの実行は，意味を調べずに機械的に実行します．(あくまでの環境構築の確認が目的なので)</p><p>最初は，イメージを作ってFATでフォーマットします．</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/osbook/day01/bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">qemu-img</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> raw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disk.img</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 200M</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkfs.fat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;MIKAN OS&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disk.img</span></span></code></pre></div><p>イメージをマウントして，バイナリファイル（hello.efi）を書き込んで，アンマウントします．</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mnt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disk.img</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mnt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mnt/EFI/BOOT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.efi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mnt/EFI/BOOT/BOOTX64.EFI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mnt</span></span></code></pre></div><p>バイナリファイルを書き込んだイメージをQEMUで読み込み起動します．(XQuartzに表示される)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">qemu-system-x86_64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -drive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=pflash,format=raw,file=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/osbook/devenv/OVMF_CODE.fd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -drive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=pflash,format=raw,file=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/osbook/devenv/OVMF_VARS.fd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -drive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file=disk.img,format=raw,index=0,media=disk</span></span></code></pre></div><p>!(/image/xquartz_hello.png)</p><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>Mac + Dockerで「ゼロからのOS自作入門」の環境構築を実装しました．</p><p>「ゼロからのOS自作入門」を進めていく上で，弊害が出た場合は逐次修正します．</p><h2 id="参考サイト" tabindex="-1">参考サイト <a class="header-anchor" href="#参考サイト" aria-label="Permalink to &quot;参考サイト&quot;">​</a></h2><p><a href="https://zenn.dev/sarisia/articles/6b57ea835344b6" target="_blank" rel="noreferrer">Docker ではじめる &quot;ゼロからのOS自作入門&quot;</a></p><p><a href="https://zenn.dev/karaage0703/articles/1bdb8930182c6c" target="_blank" rel="noreferrer">「ゼロからのOS自作入門」の副読本的記事</a></p><p><a href="https://github.com/uchan-nos/mikanos" target="_blank" rel="noreferrer">uchan-nos/mikanos</a></p><p><a href="https://github.com/uchan-nos/mikanos-build" target="_blank" rel="noreferrer">uchan-nos/mikanos-build</a></p><p><a href="https://github.com/sarisia/mikanos-devcontainer" target="_blank" rel="noreferrer">sarisia/mikanos-devcontainer</a></p><p><a href="https://github.com/sarisia/mikanos-docker" target="_blank" rel="noreferrer">sarisia/mikanos-docker</a></p><p><a href="https://github.com/bun913/go_devcontainer" target="_blank" rel="noreferrer">bun913/go_devcontainer</a></p><p><a href="https://zero.osdev.jp/" target="_blank" rel="noreferrer">「ゼロからのOS自作入門」のサポートサイト</a></p><p><a href="https://itcweb.cc.affrc.go.jp/affrit/documents/guide/x-window/x-win-mac" target="_blank" rel="noreferrer">4 macOSでのX Window利用</a></p>`,51)),a(e,null,{default:n(()=>[a(i)]),_:1}),s[2]||(s[2]=t('<h2 id="おまけ-用語の確認" tabindex="-1">おまけ(用語の確認) <a class="header-anchor" href="#おまけ-用語の確認" aria-label="Permalink to &quot;おまけ(用語の確認)&quot;">​</a></h2><p>EDKⅡ</p><blockquote><p>EDKⅡはUEFI BIOS自体の開発にも，UEFI BIOS上で動くアプリケーションの開発にも使うことができる開発キット<br> 引用元:[「ゼロからのOS自作入門」p48]</p></blockquote><p>UEFI(Unified Extensible Firmware Interface) or UEFI BIOS</p><blockquote><p>UEFIとは、一言で言うと「最近のPCやサーバーに入っている、新しくて高機能なファームウェア(及びそのインターフェースの仕様)」です。<br> 体感では、2世代目Core iシリーズのCPU以降が入っているマシンには、このUEFIが従来のBIOS(以降、BIOSと表記)の代わりに、または選択可能な状態で入っているように感じています。<br> 引用元:<a href="https://qiita.com/tnishinaga/items/40755f414557faf45dcb" target="_blank" rel="noreferrer">gnu-efiでUEFI遊びをはじめよう</a></p></blockquote><p>BIOS(Basic Input / Output System)</p><blockquote><p>BIOSは「Basic Input/Output System」の略で、CPUやメモリ、キーボード、マウスなどPCの大半の機能を制御しています。PCを起動したとき最初に作動するのがBIOSで、OSやソフトウェアとの橋渡しをする役割を担っています。<br> 引用元:<a href="https://pc-farm.co.jp/pc_column/pc/4351/" target="_blank" rel="noreferrer">BIOSとUEFIの違いについて詳しく解説！次世代のレガシーBIOSとは？</a></p></blockquote><p>UEFI BIOSと従来のBIOSの違いについて</p><blockquote><ol><li>2 TB以上のドライブを処理できます。それに対して、古いレガシーBIOSは大容量のストレージドライブを処理できませんでした。</li><li>GUIDパーティションテーブルで4つ以上のプライマリパーティションが作成可能です。</li><li>BIOSより起動プロセスが高速です。UEFIの最適化により、システムの起動がより速くなる可能性があります。安全な起動をサポートしています。つまり、オペレーティングシステムの有効性の検証によって、起動プロセスを改ざんするマルウェアがないことを確認できます。</li><li>UEFIファームウェア自体のネットワーク機能をサポートして、リモートトラブルシューティングとUEFI構成に役立ちます。</li><li>グラフィカルユーザーインターフェイスはシンプルで、レガシーBIOSよりも豊富なセットアップメニューがあります。<br><br> 引用元:<a href="https://www.partitionwizard.jp/partitionmagic/uefi-vs-bios.html" target="_blank" rel="noreferrer">UEFIとBIOS、どっちがいい？</a><br> より詳細に:<a href="https://knowledge.sakura.ad.jp/22963/" target="_blank" rel="noreferrer">現代における自作OSの難しさ 〜自作OSのいまと昔 [第2回]</a></li></ol></blockquote>',9))])}const m=p(o,[["render",d]]);export{y as __pageData,m as default};
