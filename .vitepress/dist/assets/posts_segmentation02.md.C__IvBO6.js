import{_ as k,c as e,j as a,a as t,G as i,w as l,ag as r,B as h,o as E}from"./chunks/framework.BDI6Vt0-.js";const C=JSON.parse('{"title":"Python + ESPNetをオリジナルデータで学習する(データ生成編)","description":"Python + ESPNetでCityscapesデータセットから人のみを抽出して，仮のオリジナルデータを生成します．","frontmatter":{"title":"Python + ESPNetをオリジナルデータで学習する(データ生成編) ","description":"Python + ESPNetでCityscapesデータセットから人のみを抽出して，仮のオリジナルデータを生成します．","date":"2021-03-17T00:00:00.000Z","category":["Python"],"tags":["Python","Jupyter","ESPNet","Semantic_Segmentation"]},"headers":[],"relativePath":"posts/segmentation02.md","filePath":"posts/segmentation02.md"}'),g={name:"posts/segmentation02.md"};function d(y,s,o,c,F,m){const n=h("CallInArticleAdsense"),p=h("ClientOnly");return E(),e("div",null,[s[0]||(s[0]=a("p",null,[t("セマンティックセグメンテーションの中で軽いモデルであるESPNetv2を実装します．"),a("br"),t(" 本稿ではCityscapesデータセットから人のみを抽出して，仮のオリジナルデータで学習に向けて，データ生成を実施します．"),a("br")],-1)),i(p,null,{default:l(()=>[i(n)]),_:1}),s[1]||(s[1]=r(`<p>今回はGoogle ColabとGoogle Driveを連携させて，notebook形式で実行してます．<br></p><blockquote><p>Google Colaboratory（以下Google Colab）は、Google社が無料で提供している機械学習の教育や研究用の開発環境です。開発環境はJupyter Notebookに似たインターフェースを持ち、Pythonの主要なライブラリがプリインストールされています。<br> 引用元：<a href="https://interface.cqpub.co.jp/ail01/" target="_blank" rel="noreferrer">Google Colabの使い方</a></p></blockquote><p>最終的に，人以外の背景を着色して，zoomのバーチャル背景機能のようなクロマキー合成を実装したいです．<br> !(/image/zoom.jpg)</p><h2 id="作業ディレクトリのファイル構成" tabindex="-1">作業ディレクトリのファイル構成 <a class="header-anchor" href="#作業ディレクトリのファイル構成" aria-label="Permalink to &quot;作業ディレクトリのファイル構成&quot;">​</a></h2><p>ここでは，作業ディレクトリのsegmentation/EdgeNets/vision_datasetsのファイル構成を以下に示します．</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>segmentation/EdgeNets/vision_datasets</span></span>
<span class="line"><span>├── /cityscapes</span></span>
<span class="line"><span>├── /human_city &lt;- 仮オリジナルデータ</span></span>
<span class="line"><span>│   ├── train.txt</span></span>
<span class="line"><span>│   ├── val.txt</span></span>
<span class="line"><span>│   ├── /images</span></span>
<span class="line"><span>│   │   ├── /train</span></span>
<span class="line"><span>│   │   │   └── オリジナル画像</span></span>
<span class="line"><span>│   │   └── /val</span></span>
<span class="line"><span>│   │       └── オリジナル画像</span></span>
<span class="line"><span>│   └── /annotations</span></span>
<span class="line"><span>│       ├── /train</span></span>
<span class="line"><span>│       │   └── マスキング画像</span></span>
<span class="line"><span>│       └── /val</span></span>
<span class="line"><span>│           └── マスキング画像</span></span>
<span class="line"><span>│ </span></span>
<span class="line"><span>└── create_data.ipynb &lt;- データ生成用ノートブック</span></span></code></pre></div><h2 id="オリジナルデータの学習データセット" tabindex="-1">オリジナルデータの学習データセット <a class="header-anchor" href="#オリジナルデータの学習データセット" aria-label="Permalink to &quot;オリジナルデータの学習データセット&quot;">​</a></h2><p>今回はCityscapesデータセットから人だけを抽出して，仮オリジナルデータとします．<br> オリジナルデータでESPNetv2を学習する場合は，データセットのファイル構成は以下の通りです．<br> ここでは，データセット名前をhuman_cityとしています．<br></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/human_city</span></span>
<span class="line"><span>├── train.txt</span></span>
<span class="line"><span>├── /images</span></span>
<span class="line"><span>│   ├── /train</span></span>
<span class="line"><span>│   │   └── オリジナル画像</span></span>
<span class="line"><span>│   └── /val</span></span>
<span class="line"><span>│       └── オリジナル画像</span></span>
<span class="line"><span>├── val.txt</span></span>
<span class="line"><span>└── /annotations</span></span>
<span class="line"><span>    ├── /train</span></span>
<span class="line"><span>    │   └── マスキング画像</span></span>
<span class="line"><span>    └── /val</span></span>
<span class="line"><span>        └── マスキング画像</span></span></code></pre></div><p>オリジナル画像は実際の風景画像で，マスキング画像はクラスのIDに応じたRGBでマスキングした画像です．<br> 例として，背景はRGB=(0, 0, 0)，人のクラスIDが1とするならば人の領域はRGB=(1, 1, 1)，車のクラスIDが2とするならば車の領域はRGB=(2, 2, 2)として，マスキング画像を作成する．<br> RGB=(0, 0, 0)の領域とRGB=(1, 1, 1)の領域は肉眼では判別不可能なので，最初は確認のためRGB=(0, 0, 255)など目立つ色で作成して，学習用に色を置換する方が個人的にお勧めします．<br></p><p>オリジナル画像<br> !(/image/original_image.png)<br></p><p>人をRGB=(1, 1, 1)のマスキング画像(学習用)<br> ※肉眼じゃわからん・・・ !(/image/R1.png)<br></p><p>人をRGB=(255, 0, 0)のマスキング画像(確認用)<br> !(/image/R255.png)</p><h2 id="仮オリジナルデータの生成" tabindex="-1">仮オリジナルデータの生成 <a class="header-anchor" href="#仮オリジナルデータの生成" aria-label="Permalink to &quot;仮オリジナルデータの生成&quot;">​</a></h2><p>Cityscapesデータセットから人だけを抽出して，仮オリジナルデータを生成します．<br> Cityscapesデータセットのダウンロードは，<a href="https://hirasu1231.github.io/hamlet_engineer/posts/2021/03/15/segmentation01.html" target="_blank" rel="noreferrer">Python, ESPNetでCityscapesデータセットでSemantic Segmentationの学習を実施する</a>を参照ください．</p><h3 id="作業ディレクトリの移動" tabindex="-1">作業ディレクトリの移動 <a class="header-anchor" href="#作業ディレクトリの移動" aria-label="Permalink to &quot;作業ディレクトリの移動&quot;">​</a></h3><p>作業ディレクトリは，Cityscapesデータセットのダウンロードで自動で生成される/EdgeNets/vision_datasetsとしています．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Google ColabとGoogle Driveを連携</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> google.colab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">drive.mount(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/content/drive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ディレクトリの移動</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">drive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">My\\ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Drive/segmentation/EdgeNets/vision_datasets</span></span></code></pre></div><h3 id="cityscapesデータセットの整理" tabindex="-1">Cityscapesデータセットの整理 <a class="header-anchor" href="#cityscapesデータセットの整理" aria-label="Permalink to &quot;Cityscapesデータセットの整理&quot;">​</a></h3><p>仮オリジナルデータの生成について，Cityscapesデータセットからオリジナル画像とカラーマスキング画像を使用します．<br> Cityscapesデータセットは，オリジナル画像とカラーマスキング画像は，以下の画像名となっています．<br></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>オリジナル画像：/cityscapes/leftImg8bit/train or val/＊/＊_leftImg8bit.png</span></span>
<span class="line"><span>カラーマスキング画像：/cityscapes/gtFine/train or val/＊/＊_gtFine_color.png</span></span></code></pre></div><p>オリジナル画像<br> !(/image/original_image.png)<br></p><p>カラーマスキング画像<br> !(/image/color_mask_image.png)</p><h3 id="入力画像のリスト作成" tabindex="-1">入力画像のリスト作成 <a class="header-anchor" href="#入力画像のリスト作成" aria-label="Permalink to &quot;入力画像のリスト作成&quot;">​</a></h3><p>画像を読み込ませるために，画像パスリストのtxtファイルも作成する必要があります．(train.txt, val.txt)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># train.txt, val.txt</span></span>
<span class="line"><span># オリジナル画像, マスキング画像</span></span>
<span class="line"><span>train/rgb/zurich_000072_000019_leftImg8bit.png,train/label/zurich_000072_000019_gtFine_color.png</span></span>
<span class="line"><span>train/rgb/zurich_000003_000019_leftImg8bit.png,train/label/zurich_000003_000019_gtFine_color.png</span></span>
<span class="line"><span>train/rgb/zurich_000116_000019_leftImg8bit.png,train/label/zurich_000116_000019_gtFine_color.png</span></span>
<span class="line"><span>train/rgb/zurich_000119_000019_leftImg8bit.png,train/label/zurich_000119_000019_gtFine_color.png</span></span>
<span class="line"><span>train/rgb/zurich_000032_000019_leftImg8bit.png,train/label/zurich_000032_000019_gtFine_color.png</span></span></code></pre></div><h3 id="仮オリジナルデータ生成の工程" tabindex="-1">仮オリジナルデータ生成の工程 <a class="header-anchor" href="#仮オリジナルデータ生成の工程" aria-label="Permalink to &quot;仮オリジナルデータ生成の工程&quot;">​</a></h3><p>人を抽出する工程は，カラーマスキング画像の色を，人以外をBGR(0, 0, 0)，人をBGR(1, 1, 1)に置換して実施してます．<br> カラー画像で特定の色を置換する場合は，本サイトの「<a href="https://hirasu1231.github.io/hamlet_engineer/posts/2021/03/16/color-replace.html" target="_blank" rel="noreferrer">Python, OpenCVで指定した色の抽出と別の色への置換を実装する</a>」を参照ください．<br> 以下のコードでは一通りの工程をdef文でまとめました．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> glob</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shutil</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 学習データセットのディレクトリの作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_dataset_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataset_name):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    os.makedirs(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/images/train/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(dataset_name), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exist_ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 訓練用オリジナル画像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    os.makedirs(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/annotations/train/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(dataset_name), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exist_ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 訓練用マスキング画像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    os.makedirs(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/images/val/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(dataset_name), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exist_ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 評価用オリジナル画像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    os.makedirs(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/annotations/val/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(dataset_name), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exist_ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 評価用マスキング画像</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># オリジナル画像をコピー</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> copy_org_image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(color_image_path, data_type, dataset_name):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # カラーマスキング画像の名前</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    color_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.basename(color_image_path)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # データのディレクトリ名(データを取得した都市名)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    city_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color_name.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # オリジナル画像の名前とパス</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    org_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color_name.replace(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_gtFine_color.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_leftImg8bit.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    org_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./cityscapes/leftImg8bit/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(data_type, city_name, org_name)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # オリジナル画像をコピー</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shutil.copy(org_path, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/images/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(dataset_name, data_type, org_name))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(data_type, org_name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 画像の特定の色を抽出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> color_extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cv2_img, color1):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # BGRでの色抽出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bgrLower </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.array(color1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 抽出する色の下限(BGR)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bgrUpper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.array(color1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 抽出する色の上限(BGR)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    img_mask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.inRange(cv2_img, bgrLower, bgrUpper) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># BGRからマスクを作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ex_img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.bitwise_and(cv2_img, cv2_img, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">img_mask) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 元画像とマスクを合成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ex_img</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 画像の特定の色を別の色に置換</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> color_replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ex_img, color1, color2):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    before_color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    after_color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ex_img[np.where((ex_img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> before_color).all(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> after_color</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ex_img</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 学習用マスキング画像を出力</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> replace_masking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cv2_img, data_type, dataset_name, color1, color2):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 学習用マスキング画像を生成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ex_img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color_extract(cv2_img, color1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mask_img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color_replace(ex_img, color1, color2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # グレースケール化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mask_img_gray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.cvtColor(mask_img, cv2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COLOR_BGR2GRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # マスキング画像の出力</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    color_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.basename(color_image)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mask_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/annotations/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(dataset_name, data_type, color_name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cv2.imwrite(mask_path, mask_img_gray)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(data_type, color_name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># パスリストのtxtファイル作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create_txtfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txt_path, txt, txt_flag):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 新規作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> txt_flag:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txt_path, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            f.write(txt)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 追記</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txt_path, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            f.write(txt)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><h3 id="仮オリジナルデータ生成の実行" tabindex="-1">仮オリジナルデータ生成の実行 <a class="header-anchor" href="#仮オリジナルデータ生成の実行" aria-label="Permalink to &quot;仮オリジナルデータ生成の実行&quot;">​</a></h3><p>以下のコードで仮オリジナルデータ生成を実行します．<br><a href="https://github.com/mcordts/cityscapesScripts/blob/master/cityscapesscripts/helpers/labels.py" target="_blank" rel="noreferrer">cityscapesScripts/cityscapesscripts/helpers/labels.py</a>より人のマスキングのRGBは(220, 20, 60)となります．<br> カラーマスキング画像を読み込んで，人のRGB=(220, 20, 60)の箇所があれば，学習用データセットとして整形するようにしています．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> glob</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 学習データセットのディレクトリの作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataset_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;human_city&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">make_dataset_dir(dataset_name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Cityscapes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;train&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># カラーマスキング</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color_images </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> glob.glob(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./cityscapes/gtFine/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/*/*_gtFine_color.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(data_type))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 人のマスキングカラー(BGR)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">human_color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">220</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">label_color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">txt_flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color_images:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # カラーマスキング画像の読み込み</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2.imread(color_image)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 人の色があるか，判定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img[np.where((img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> human_color).all(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 学習用マスキング画像を出力</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        txt_mask_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replace_masking(img, data_type, dataset_name, human_color, label_color)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # オリジナル画像をコピー</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        txt_org_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy_org_image(color_image, data_type, dataset_name)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # パスリストのtxtファイル作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        txt_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(dataset_name, data_type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(txt_org_path, txt_mask_path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        txt_flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> create_txtfile(txt_path, txt, txt_flag)</span></span></code></pre></div><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>Cityscapesデータセットから人のみを抽出して，仮のオリジナルデータで学習に向けて，データ生成を実施しました．<br> 次回からは本稿の仮オリジナルデータでの学習を実施します．</p><h2 id="参考サイト" tabindex="-1">参考サイト <a class="header-anchor" href="#参考サイト" aria-label="Permalink to &quot;参考サイト&quot;">​</a></h2><p><a href="https://github.com/sacmehta/EdgeNets" target="_blank" rel="noreferrer">sacmehta/EdgeNets</a><br><a href="https://github.com/sacmehta/EdgeNets/blob/master/README_Segmentation.md" target="_blank" rel="noreferrer">sacmehta/EdgeNets/README_Segmentation.md</a><a href="https://qiita.com/tokyokuma/items/37b1370ea7c84399fbb9" target="_blank" rel="noreferrer">ESPNetで自作データセットを学習してセグメンテーション</a><br><a href="https://rikoubou.hatenablog.com/entry/2019/02/21/190310" target="_blank" rel="noreferrer">【python/OpenCV】画像の特定の色を抽出する方法</a><br><a href="https://qiita.com/pashango2/items/d6dda5f07109ee5b6163" target="_blank" rel="noreferrer">PIL/Pillowで画像の色を高速に置換する</a><br><a href="http://ni4muraano.hatenablog.com/entry/2017/05/15/000000" target="_blank" rel="noreferrer">【OpenCV】 forループを使わずに指定した色を別の色に変更する</a></p>`,37)),i(p,null,{default:l(()=>[i(n)]),_:1})])}const A=k(g,[["render",d]]);export{C as __pageData,A as default};
