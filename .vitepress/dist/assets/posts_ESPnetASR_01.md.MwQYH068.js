import{_ as p,c as k,j as i,a as l,G as a,w as e,ag as r,B as h,o}from"./chunks/framework.BDI6Vt0-.js";const b=JSON.parse('{"title":"Python + ESPnetで日本語の文字起こし(ASR)を実装する","description":"Python + ESPnetで日本語の文字起こし(ASR)を実施します．","frontmatter":{"title":"Python + ESPnetで日本語の文字起こし(ASR)を実装する","description":"Python + ESPnetで日本語の文字起こし(ASR)を実施します．","date":"2021-11-20T00:00:00.000Z","category":["Python"],"tags":["Python","jupyter","ESPnet","ASR"]},"headers":[],"relativePath":"posts/ESPnetASR_01.md","filePath":"posts/ESPnetASR_01.md"}'),d={name:"posts/ESPnetASR_01.md"};function E(g,s,y,c,A,u){const n=h("CallInArticleAdsense"),t=h("ClientOnly");return o(),k("div",null,[s[0]||(s[0]=i("p",null,[l("Python + ESPnetで日本語の文字起こし(ASR)を実施します．"),i("br")],-1)),s[1]||(s[1]=i("p",null,[l("今回はGoogle ColabとGoogle Driveを連携させて，notebook形式で実行してます．"),i("br")],-1)),a(t,null,{default:e(()=>[a(n)]),_:1}),s[2]||(s[2]=r(`<blockquote><p>Google Colaboratory（以下Google Colab）は、Google社が無料で提供している機械学習の教育や研究用の開発環境です。開発環境はJupyter Notebookに似たインターフェースを持ち、Pythonの主要なライブラリがプリインストールされています。<br> 引用元：<a href="https://interface.cqpub.co.jp/ail01/" target="_blank" rel="noreferrer">Google Colabの使い方</a></p></blockquote><h2 id="google-colabのファイル構成" tabindex="-1">Google Colabのファイル構成 <a class="header-anchor" href="#google-colabのファイル構成" aria-label="Permalink to &quot;Google Colabのファイル構成&quot;">​</a></h2><p>プロジェクトディレクトリはASRとしています．度々，省略しています．</p><p>本稿では，<a href="https://www.youtube.com/watch?v=us6ClXxB9uY" target="_blank" rel="noreferrer">岡田斗司夫さんの切り抜き動画</a>を文字起こしします．</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ASR</span></span>
<span class="line"><span>├── okada.mp4 &lt;- 文字起こし動画</span></span>
<span class="line"><span>├── okada.wav &lt;- 文字起こし音声</span></span>
<span class="line"><span>├── 01_okada.wav &lt;- 0~60秒までの音声</span></span>
<span class="line"><span>└── ESPnetASR.ipynb &lt;- 実行用ノートブック</span></span></code></pre></div><h2 id="google-driveと連携" tabindex="-1">Google Driveと連携 <a class="header-anchor" href="#google-driveと連携" aria-label="Permalink to &quot;Google Driveと連携&quot;">​</a></h2><p>Google ColabとGoogle Driveを連携させて，作業ディレクトリを作成します．<br></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Google Driveと連携</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> google.colab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">drive.mount(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/content/drive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 作業ディレクトリの作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">drive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyDrive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mkdir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ASR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cd </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ASR</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ls</span></span></code></pre></div><h2 id="モジュールのインストール" tabindex="-1">モジュールのインストール <a class="header-anchor" href="#モジュールのインストール" aria-label="Permalink to &quot;モジュールのインストール&quot;">​</a></h2><p>下記のコマンドでモジュールをインストールします．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ffmpeg</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">apt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get install ffmpeg</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pip</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install torch</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install espnet_model_zoo</span></span></code></pre></div><h2 id="動画から音声へ変換" tabindex="-1">動画から音声へ変換 <a class="header-anchor" href="#動画から音声へ変換" aria-label="Permalink to &quot;動画から音声へ変換&quot;">​</a></h2><p>ffmpegで動画から音声への変換を実行します．</p><p>ESPNetでは下記のwavファイルの設定でないと，ちゃんと文字起こしされません．</p><ul><li>Channel num : 1</li><li>Sample width : 2</li><li>Sampling rate : 16000</li></ul><p>上記の設定を加味した変換は下記の通りとなります．また，あまりに音声データが長いと，メモリーが足りずプログラムが止まるので，本稿では60秒の長さで文字起こしします．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 動画→音声</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffmpeg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;okada.mp4&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f wav </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;okada.wav&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 音声の切り抜き</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffmpeg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i okada.wav </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ss </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">01_okada</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.wav</span></span></code></pre></div><h3 id="文字起こしの実行" tabindex="-1">文字起こしの実行 <a class="header-anchor" href="#文字起こしの実行" aria-label="Permalink to &quot;文字起こしの実行&quot;">​</a></h3><p>下記のコードで文字起こしを実行します．</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soundfile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> espnet_model_zoo.downloader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ModelDownloader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> espnet2.bin.asr_inference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Speech2Text</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 学習済みをダウンロードし、音声認識モデルを作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ModelDownloader()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">speech2text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Speech2Text(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        **</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d.download_and_unpack(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kan-bayashi/csj_asr_train_asr_transformer_raw_char_sp_valid.acc.ave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cuda&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # CPU で認識を行う場合は省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 音声ファイル読み込み</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;01_okada.wav&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">speech, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soundfile.read(fname)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 認識させたい音声ファイルを指定</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 認識結果の取得と表示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nbests </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> speech2text(speech)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nbests[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ＮＨＫのですねあの先週ですね東京ミラクルの第三種ですねえー最近の商品アニメっていう海が放映されたんですけども</span></span></code></pre></div><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>本稿では，ESPNetによる文字起こしを実装しました．</p><h2 id="参考サイト" tabindex="-1">参考サイト <a class="header-anchor" href="#参考サイト" aria-label="Permalink to &quot;参考サイト&quot;">​</a></h2><p><a href="https://kan-bayashi.github.io/asj-espnet2-tutorial/#%E3%83%AC%E3%82%B7%E3%83%94%E3%81%AE%E6%A7%8B%E9%80%A0" target="_blank" rel="noreferrer">ESPnet2で始めるEnd-to-End音声処理</a></p><p><a href="https://tech.fusic.co.jp/posts/2021-08-03-espnet/" target="_blank" rel="noreferrer">複雑な音声処理タスクを一気通貫で実装できる! ESPnetの概念と特徴について</a></p><p><a href="https://tech.fusic.co.jp/posts/2021-08-20-ml-espnet-tts-2/" target="_blank" rel="noreferrer">簡単に作れるTTSモデル：ESPnetを用いたつくよみちゃんTTSモデル作成</a></p><p><a href="https://tech.retrieva.jp/entry/2020/12/23/170645" target="_blank" rel="noreferrer">ESPnet による音声認識入門 ～ESPnet Model Zoo 編～</a></p><p><a href="https://qiita.com/kan-bayashi/items/536acaf165344a6d6460" target="_blank" rel="noreferrer">End-to-End音声処理ツールキットESPnetの紹介</a></p>`,29)),a(t,null,{default:e(()=>[a(n)]),_:1})])}const F=p(d,[["render",E]]);export{b as __pageData,F as default};
